* broadcasting application notes

#+BEGIN_SRC jupyter-python
import numpy as np
X = np.array([[0, 1],
              [0, 0.5],
              [1, 0]])
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
plt.plot(*X.T, 'ro');
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/e8f089d7bccb8f559c0037bf987e0ee176976ef6.png]]
:END:



#+BEGIN_SRC jupyter-python  
X.shape
#+END_SRC

#+RESULTS:
:RESULTS:
| 3 | 2 |
:END:


#+BEGIN_SRC jupyter-python  
n, m = X.shape
D = np.full((3, 3), np.nan)
D
#+END_SRC

#+RESULTS:
:RESULTS:
array([[nan, nan, nan],
       [nan, nan, nan],
       [nan, nan, nan]])
:END:


#+BEGIN_SRC jupyter-python  
for i in range(n):
    for j in range(n):
        D[i, j] = np.linalg.norm(X[i] - X[j])

D
#+END_SRC

#+RESULTS:
:RESULTS:
array([[0.        , 0.5       , 1.41421356],
       [0.5       , 0.        , 1.11803399],
       [1.41421356, 1.11803399, 0.        ]])
:END:

#+BEGIN_SRC jupyter-python
np.sqrt(5) / 2
#+END_SRC

#+RESULTS:
:RESULTS:
1.118033988749895
:END:


* Avoiding the loops - first attempt



#+BEGIN_SRC jupyter-python
X1 = np.stack([X, X, X], axis=1)
X1
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
array([[[0. , 1. ],
        [0. , 1. ],
        [0. , 1. ]],

       [[0.5, 0.5],
        [0.5, 0.5],
        [0.5, 0.5]],

       [[1. , 0. ],
        [1. , 0. ],
        [1. , 0. ]]])
#+end_example
:END:

#+BEGIN_SRC jupyter-python
X1[2][0]
#+END_SRC

#+RESULTS:
:RESULTS:
array([1., 0.])
:END:

#+BEGIN_SRC jupyter-python  
X2 = np.stack([X, X, X], axis=0)
X2
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
array([[[0. , 1. ],
        [0.5, 0.5],
        [1. , 0. ]],

       [[0. , 1. ],
        [0.5, 0.5],
        [1. , 0. ]],

       [[0. , 1. ],
        [0.5, 0.5],
        [1. , 0. ]]])
#+end_example
:END:

#+BEGIN_SRC jupyter-python
X1 - X2
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
array([[[ 0. ,  0. ],
        [-0.5,  0.5],
        [-1. ,  1. ]],

       [[ 0.5, -0.5],
        [ 0. ,  0. ],
        [-0.5,  0.5]],

       [[ 1. , -1. ],
        [ 0.5, -0.5],
        [ 0. ,  0. ]]])
#+end_example
:END:



#+BEGIN_SRC jupyter-python
np.linalg.norm(X1 - X2, axis=2)
#+END_SRC

#+RESULTS:
:RESULTS:
array([[0.        , 0.70710678, 1.41421356],
       [0.70710678, 0.        , 0.70710678],
       [1.41421356, 0.70710678, 0.        ]])
:END:




** With broadcasting



#+BEGIN_SRC jupyter-python
np.linalg.norm(X[:, None] - X[None, :], axis=2)
#+END_SRC

#+RESULTS:
:RESULTS:
array([[0.        , 0.70710678, 1.41421356],
       [0.70710678, 0.        , 0.70710678],
       [1.41421356, 0.70710678, 0.        ]])
:END:

#+BEGIN_SRC jupyter-python
np.linalg.norm(X[None, :] - X[:, None], axis=2)
#+END_SRC

#+RESULTS:
:RESULTS:
array([[0.        , 0.70710678, 1.41421356],
       [0.70710678, 0.        , 0.70710678],
       [1.41421356, 0.70710678, 0.        ]])
:END:

#+begin_src jupyter-python
r
#+end_src

#+BEGIN_SRC jupyter-python
np.broadcast_to(X[:, None], (3, 3, 2))
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
array([[[0. , 1. ],
        [0. , 1. ],
        [0. , 1. ]],

       [[0.5, 0.5],
        [0.5, 0.5],
        [0.5, 0.5]],

       [[1. , 0. ],
        [1. , 0. ],
        [1. , 0. ]]])
#+end_example
:END:

#+BEGIN_SRC jupyter-python
np.broadcast_to(X[None, :], (3, 3, 2))
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
array([[[0. , 1. ],
        [0.5, 0.5],
        [1. , 0. ]],

       [[0. , 1. ],
        [0.5, 0.5],
        [1. , 0. ]],

       [[0. , 1. ],
        [0.5, 0.5],
        [1. , 0. ]]])
#+end_example
:END:

