* DONE Nonlinear regression with confidence
CLOSED: [2021-10-20 Wed 12:39]
#+attr_org: :width 600
[[/Users/jkitchin/Dropbox/python/pycse/pycse-channel/screenshots/pycse-vs-lmfit.png]]
Goal: fit $y = a (1 - e^{-bx})$ to this data and estimate confidence intervals on \(a, b\).

#+BEGIN_SRC jupyter-python
import numpy as np
import matplotlib.pyplot as plt

x = np.array([1,   2,   3,   5,   7,   10])
y = np.array([109, 149, 149, 191, 213, 224])
plt.plot(x, y, 'bo')
plt.xlabel('Incubation (days)')
plt.ylabel('BOD');
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/8a92cde3b9a8239cbeb8efda6fa37bde88a2ae3f.png]]

* curve_fit

#+BEGIN_SRC jupyter-python
import numpy as np
from scipy.optimize import curve_fit

def model(x, a, b):
    return a * (1 - np.exp(-b * x))

pars, pcov = curve_fit(model, x, y, [220, 1])
print(pars)
with np.printoptions(precision=3):
    print(pcov)
#+END_SRC

#+RESULTS:
: [213.80923957   0.54723945]
: [[ 1.526e+02 -9.428e-01]
:  [-9.428e-01  1.093e-02]]

#+BEGIN_SRC jupyter-python
np.sqrt(np.diag(pcov))
#+END_SRC

#+RESULTS:
: array([12.35438749,  0.10456191])

#+BEGIN_SRC jupyter-python
plt.plot(x, y, 'bo')
X = np.linspace(0, 20)
plt.plot(X, model(X, *pars));
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/5ed27750c386d5c530fac38e1db781cb95fd87a0.png]]

* nlinfit

#+BEGIN_SRC jupyter-python
from pycse import nlinfit

pars, pci, se = nlinfit(model, x, y, [200, 1],
                        1 - 0.9545)
print(pars)
with np.printoptions(precision=3, suppress=True):
    print(pci)
se
#+END_SRC

#+RESULTS:
:RESULTS:
: [213.80988014   0.54723202]
: [[178.36  249.26 ]
:  [  0.247   0.847]]
: array([12.35487034,  0.10455444])
:END:



* lmfit

https://lmfit.github.io/lmfit-py/index.html

#+BEGIN_SRC jupyter-python
import lmfit

pars = lmfit.Parameters()
pars.add_many(('a', 200), ('b', 1))

def residuals(p):
    return model(x, p['a'], p['b']) - y

mini = lmfit.Minimizer(residuals, pars)
result = mini.minimize()

print(lmfit.fit_report(result.params))
#+END_SRC

#+RESULTS:
: [[Variables]]
:     a:  213.809880 +/- 12.3548703 (5.78%) (init = 200)
:     b:  0.54723202 +/- 0.10455444 (19.11%) (init = 1)
: [[Correlations]] (unreported correlations are < 0.100)
:     C(a, b) = -0.730

#+BEGIN_SRC jupyter-python
ci = lmfit.conf_interval(mini, result)
lmfit.printfuncs.report_ci(ci)
#+END_SRC

#+RESULTS:
:       99.73%    95.45%    68.27%    _BEST_    68.27%    95.45%    99.73%
:  a: -70.76004 -33.84184 -14.32383 213.80988 +16.10562 +46.69926+235.04635
:  b:  -0.44875  -0.25084  -0.11766   0.54723  +0.15833  +0.55539      +inf

#+BEGIN_SRC jupyter-python
213.80988 -33.84184
#+END_SRC

#+RESULTS:
: 179.96804
