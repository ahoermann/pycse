#+title: Boundary value problems in Python

#+attr_org: :width 800
[[/Users/jkitchin/Dropbox/python/pycse/pycse-channel/screenshots/bvp.png]]

A typical boundary value problem in chemical engineering is the concentration profile inside a catalyst particle. Here is the dimensionless equation for a second order reaction in a slab. Note here we have a boundary condition on the derivative at the origin. This kind of condition means either there is no flux at this position, or that the slab is symmetric about this position.

$\frac{d^2c}{dx^2} = \Phi^2 c^2$

with $c'(0)$ = 0 and $c(1) = 1$. Our goal is to find $c(x)$. Let $\Phi=10$.

#+BEGIN_SRC jupyter-python
from scipy.integrate import solve_bvp
?solve_bvp
#+END_SRC

#+RESULTS:

#+attr_org: :width 300
[[././screenshots/2021-10-10:14:55:53.png]]

#+BEGIN_SRC jupyter-python
Phi = 10
def bvp(x, C):
    c1, c2 = C
    dc1dx = c2
    dc2dx = Phi**2 * c1**2
    return [dc1dx, dc2dx]

def bc(Ca, Cb):
    c1a, c2a = Ca
    c1b, c2b = Cb
    return [c2a,  # equivalent to c1'(0) = 0
            c1b - 1]
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python  
import numpy as np

x = np.linspace(0, 1)
#+END_SRC

#+RESULTS:

Here we make the initial guess for the solutions.

#+BEGIN_SRC jupyter-python  
pars = np.polyfit([0, 0.5, 1], [0.1, 0.3, 1], 2)
c1 = np.polyval(pars, x)

import matplotlib.pyplot as plt
plt.plot(x, c1);

c2 = Phi**2 * c1**2
plt.plot(x, c2);
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/21dd1a5851a9aef0cbbd37557e820bf35c993de0.png]]

#+BEGIN_SRC jupyter-python
sol = solve_bvp(bvp, bc, x, [c1, c2])
sol
#+END_SRC

#+RESULTS:
#+begin_example
       message: 'The algorithm converged to the desired accuracy.'
         niter: 2
             p: None
 rms_residuals: array([2.25998242e-05, 2.26166812e-05, 2.26508510e-05, 2.27030621e-05,
       2.27736785e-05, 2.28631467e-05, 2.29717409e-05, 2.30996215e-05,
       2.32469737e-05, 2.34136625e-05, 2.35997701e-05, 2.38048538e-05,
       2.40288820e-05, 2.42710638e-05, 2.45312323e-05, 2.48082224e-05,
       2.51017049e-05, 2.54100942e-05, 2.57328668e-05, 2.60679664e-05,
       2.64146548e-05, 2.67703582e-05, 2.71340856e-05, 2.75027052e-05,
       2.78749511e-05, 2.82471026e-05, 2.86176130e-05, 2.89821534e-05,
       2.93388932e-05, 2.96829090e-05, 3.00121263e-05, 3.03210521e-05,
       3.06074359e-05, 3.08653013e-05, 3.10923120e-05, 3.12821402e-05,
       3.14324963e-05, 3.15368890e-05, 3.15932472e-05, 3.15951553e-05,
       3.15409770e-05, 3.14246531e-05, 3.12452269e-05, 3.09973249e-05,
       3.06809185e-05, 3.02916841e-05, 2.98307511e-05, 2.92951806e-05,
       2.86875029e-05, 2.80064572e-05, 2.72561064e-05, 2.64371175e-05,
       2.55551587e-05, 2.46129250e-05, 2.36176534e-05, 2.25740698e-05,
       2.14908067e-05, 2.03745054e-05, 1.92349143e-05, 1.80803649e-05,
       1.69214281e-05, 1.57678344e-05, 1.46307523e-05, 1.35211634e-05,
       1.24507925e-05, 1.14319515e-05, 1.04772446e-05, 9.60067415e-06,
       8.81617466e-06, 8.13932744e-06, 7.58440449e-06, 7.16547631e-06,
       6.89172136e-06, 6.76794649e-06, 6.79087620e-06, 6.95226096e-06,
       7.23921697e-06, 7.63916555e-06, 8.14087371e-06, 8.73716794e-06,
       9.42449770e-06, 1.02035954e-05, 1.10786239e-05, 1.20572811e-05,
       1.10278963e-04, 1.32391193e-04, 1.60286585e-04, 1.95965038e-04,
       2.42318927e-04, 3.03634913e-04, 3.86447524e-04])
           sol: <scipy.interpolate.interpolate.PPoly object at 0x7fc1107266d0>
        status: 0
       success: True
             x: array([0.        , 0.01020408, 0.02040816, 0.03061224, 0.04081633,
       0.05102041, 0.06122449, 0.07142857, 0.08163265, 0.09183673,
       0.10204082, 0.1122449 , 0.12244898, 0.13265306, 0.14285714,
       0.15306122, 0.16326531, 0.17346939, 0.18367347, 0.19387755,
       0.20408163, 0.21428571, 0.2244898 , 0.23469388, 0.24489796,
       0.25510204, 0.26530612, 0.2755102 , 0.28571429, 0.29591837,
       0.30612245, 0.31632653, 0.32653061, 0.33673469, 0.34693878,
       0.35714286, 0.36734694, 0.37755102, 0.3877551 , 0.39795918,
       0.40816327, 0.41836735, 0.42857143, 0.43877551, 0.44897959,
       0.45918367, 0.46938776, 0.47959184, 0.48979592, 0.5       ,
       0.51020408, 0.52040816, 0.53061224, 0.54081633, 0.55102041,
       0.56122449, 0.57142857, 0.58163265, 0.59183673, 0.60204082,
       0.6122449 , 0.62244898, 0.63265306, 0.64285714, 0.65306122,
       0.66326531, 0.67346939, 0.68367347, 0.69387755, 0.70408163,
       0.71428571, 0.7244898 , 0.73469388, 0.74489796, 0.75510204,
       0.76530612, 0.7755102 , 0.78571429, 0.79591837, 0.80612245,
       0.81632653, 0.82653061, 0.83673469, 0.84693878, 0.85714286,
       0.87755102, 0.89795918, 0.91836735, 0.93877551, 0.95918367,
       0.97959184, 1.        ])
             y: array([[5.70866813e-02, 5.71036478e-02, 5.71545677e-02, 5.72395015e-02,
        5.73585504e-02, 5.75118564e-02, 5.76996030e-02, 5.79220154e-02,
        5.81793615e-02, 5.84719523e-02, 5.88001434e-02, 5.91643355e-02,
        5.95649761e-02, 6.00025605e-02, 6.04776336e-02, 6.09907916e-02,
        6.15426835e-02, 6.21340136e-02, 6.27655436e-02, 6.34380949e-02,
        6.41525515e-02, 6.49098627e-02, 6.57110465e-02, 6.65571928e-02,
        6.74494671e-02, 6.83891147e-02, 6.93774651e-02, 7.04159361e-02,
        7.15060399e-02, 7.26493877e-02, 7.38476961e-02, 7.51027935e-02,
        7.64166268e-02, 7.77912696e-02, 7.92289297e-02, 8.07319582e-02,
        8.23028593e-02, 8.39443006e-02, 8.56591243e-02, 8.74503598e-02,
        8.93212369e-02, 9.12752003e-02, 9.33159257e-02, 9.54473369e-02,
        9.76736247e-02, 9.99992676e-02, 1.02429054e-01, 1.04968109e-01,
        1.07621916e-01, 1.10396353e-01, 1.13297721e-01, 1.16332781e-01,
        1.19508793e-01, 1.22833562e-01, 1.26315480e-01, 1.29963585e-01,
        1.33787618e-01, 1.37798087e-01, 1.42006339e-01, 1.46424643e-01,
        1.51066275e-01, 1.55945624e-01, 1.61078297e-01, 1.66481249e-01,
        1.72172921e-01, 1.78173398e-01, 1.84504586e-01, 1.91190412e-01,
        1.98257052e-01, 2.05733186e-01, 2.13650290e-01, 2.22042968e-01,
        2.30949331e-01, 2.40411427e-01, 2.50475745e-01, 2.61193782e-01,
        2.72622702e-01, 2.84826106e-01, 2.97874911e-01, 3.11848388e-01,
        3.26835369e-01, 3.42935656e-01, 3.60261696e-01, 3.78940542e-01,
        3.99116192e-01, 4.44635685e-01, 4.98431685e-01, 5.62634551e-01,
        6.40107814e-01, 7.34773067e-01, 8.52116131e-01, 1.00000000e+00],
       [0.00000000e+00, 3.32577690e-03, 6.65550938e-03, 9.99316480e-03,
        1.33427341e-02, 1.67082436e-02, 2.00937675e-02, 2.35034397e-02,
        2.69414669e-02, 3.04121411e-02, 3.39198534e-02, 3.74691077e-02,
        4.10645352e-02, 4.47109091e-02, 4.84131610e-02, 5.21763970e-02,
        5.60059154e-02, 5.99072251e-02, 6.38860650e-02, 6.79484251e-02,
        7.21005685e-02, 7.63490550e-02, 8.07007663e-02, 8.51629332e-02,
        8.97431647e-02, 9.44494793e-02, 9.92903382e-02, 1.04274682e-01,
        1.09411971e-01, 1.14712226e-01, 1.20186073e-01, 1.25844798e-01,
        1.31700398e-01, 1.37765638e-01, 1.44054121e-01, 1.50580352e-01,
        1.57359820e-01, 1.64409078e-01, 1.71745835e-01, 1.79389061e-01,
        1.87359091e-01, 1.95677751e-01, 2.04368489e-01, 2.13456523e-01,
        2.22969003e-01, 2.32935192e-01, 2.43386662e-01, 2.54357512e-01,
        2.65884618e-01, 2.78007896e-01, 2.90770609e-01, 3.04219699e-01,
        3.18406160e-01, 3.33385460e-01, 3.49218006e-01, 3.65969669e-01,
        3.83712375e-01, 4.02524762e-01, 4.22492932e-01, 4.43711293e-01,
        4.66283509e-01, 4.90323582e-01, 5.15957080e-01, 5.43322531e-01,
        5.72573012e-01, 6.03877974e-01, 6.37425317e-01, 6.73423785e-01,
        7.12105720e-01, 7.53730231e-01, 7.98586873e-01, 8.46999900e-01,
        8.99333227e-01, 9.55996202e-01, 1.01745038e+00, 1.08421744e+00,
        1.15688856e+00, 1.23613546e+00, 1.32272346e+00, 1.41752713e+00,
        1.52154891e+00, 1.63594141e+00, 1.76203444e+00, 1.90136751e+00,
        2.05572957e+00, 2.41824447e+00, 2.87101967e+00, 3.44403247e+00,
        4.18004129e+00, 5.14142337e+00, 6.42153385e+00, 8.16424791e+00]])
            yp: array([[0.00000000e+00, 3.32577690e-03, 6.65550938e-03, 9.99316480e-03,
        1.33427341e-02, 1.67082436e-02, 2.00937675e-02, 2.35034397e-02,
        2.69414669e-02, 3.04121411e-02, 3.39198534e-02, 3.74691077e-02,
        4.10645352e-02, 4.47109091e-02, 4.84131610e-02, 5.21763970e-02,
        5.60059154e-02, 5.99072251e-02, 6.38860650e-02, 6.79484251e-02,
        7.21005685e-02, 7.63490550e-02, 8.07007663e-02, 8.51629332e-02,
        8.97431647e-02, 9.44494793e-02, 9.92903382e-02, 1.04274682e-01,
        1.09411971e-01, 1.14712226e-01, 1.20186073e-01, 1.25844798e-01,
        1.31700398e-01, 1.37765638e-01, 1.44054121e-01, 1.50580352e-01,
        1.57359820e-01, 1.64409078e-01, 1.71745835e-01, 1.79389061e-01,
        1.87359091e-01, 1.95677751e-01, 2.04368489e-01, 2.13456523e-01,
        2.22969003e-01, 2.32935192e-01, 2.43386662e-01, 2.54357512e-01,
        2.65884618e-01, 2.78007896e-01, 2.90770609e-01, 3.04219699e-01,
        3.18406160e-01, 3.33385460e-01, 3.49218006e-01, 3.65969669e-01,
        3.83712375e-01, 4.02524762e-01, 4.22492932e-01, 4.43711293e-01,
        4.66283509e-01, 4.90323582e-01, 5.15957080e-01, 5.43322531e-01,
        5.72573012e-01, 6.03877974e-01, 6.37425317e-01, 6.73423785e-01,
        7.12105720e-01, 7.53730231e-01, 7.98586873e-01, 8.46999900e-01,
        8.99333227e-01, 9.55996202e-01, 1.01745038e+00, 1.08421744e+00,
        1.15688856e+00, 1.23613546e+00, 1.32272346e+00, 1.41752713e+00,
        1.52154891e+00, 1.63594141e+00, 1.76203444e+00, 1.90136751e+00,
        2.05572957e+00, 2.41824447e+00, 2.87101967e+00, 3.44403247e+00,
        4.18004129e+00, 5.14142337e+00, 6.42153385e+00, 8.16424791e+00],
       [3.25888918e-01, 3.26082660e-01, 3.26664461e-01, 3.27636053e-01,
        3.29000330e-01, 3.30761363e-01, 3.32924419e-01, 3.35495987e-01,
        3.38483810e-01, 3.41896921e-01, 3.45745686e-01, 3.50041859e-01,
        3.54798637e-01, 3.60030727e-01, 3.65754417e-01, 3.71987666e-01,
        3.78750189e-01, 3.86063565e-01, 3.93951346e-01, 4.02439188e-01,
        4.11554986e-01, 4.21329028e-01, 4.31794164e-01, 4.42985991e-01,
        4.54943061e-01, 4.67707101e-01, 4.81323266e-01, 4.95840406e-01,
        5.11311375e-01, 5.27793354e-01, 5.45348222e-01, 5.64042959e-01,
        5.83950086e-01, 6.05148163e-01, 6.27722330e-01, 6.51764907e-01,
        6.77376065e-01, 7.04664560e-01, 7.33748558e-01, 7.64756543e-01,
        7.97828336e-01, 8.33116220e-01, 8.70786199e-01, 9.11019412e-01,
        9.54013696e-01, 9.99985352e-01, 1.04917112e+00, 1.10183038e+00,
        1.15824767e+00, 1.21873547e+00, 1.28363735e+00, 1.35333159e+00,
        1.42823517e+00, 1.50880839e+00, 1.59556004e+00, 1.68905334e+00,
        1.78991268e+00, 1.89883128e+00, 2.01658004e+00, 2.14401761e+00,
        2.28210196e+00, 2.43190376e+00, 2.59462178e+00, 2.77160064e+00,
        2.96435149e+00, 3.17457598e+00, 3.40419422e+00, 3.65537736e+00,
        3.93058587e+00, 4.23261439e+00, 4.56464466e+00, 4.93030798e+00,
        5.33375933e+00, 5.77976543e+00, 6.27380990e+00, 6.82221916e+00,
        7.43231378e+00, 8.11259105e+00, 8.87294625e+00, 9.72494173e+00,
        1.06821358e+01, 1.17604864e+01, 1.29788490e+01, 1.43595934e+01,
        1.59293735e+01, 1.97700893e+01, 2.48434144e+01, 3.16557638e+01,
        4.09738013e+01, 5.39891459e+01, 7.26101901e+01, 1.00000000e+02]])
#+end_example


#+BEGIN_SRC jupyter-python
c1, c2 = sol.y
plt.plot(sol.x, c1)
plt.plot(sol.x, np.polyval(pars, sol.x))
plt.legend(['solution', 'initial guess'])
plt.xlabel('x')
plt.ylabel('c');
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/56c13ceae8903d7961c73c8d4365026d92e11e5d.png]]

#+BEGIN_SRC jupyter-python
from scipy.integrate import quad

def integrand(x):
    c1, c2 = sol.sol(x)
    return c1**2

quad(integrand, 0, 1)
#+END_SRC

#+RESULTS:
| 0.08164247719323622 | 8.032346426102822e-09 |
