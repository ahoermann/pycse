#+title: Solving ODEs with solve_ivp and events

#+attr_org: :width 600
[[/Users/jkitchin/Dropbox/python/pycse/pycse-channel/screenshots/odes-events.png]]
$y'(x) = \sin x e^{-0.5 x}, y(-1)=-0.5$

#+BEGIN_SRC jupyter-python
import numpy as np
from scipy.integrate import solve_ivp

def ode(x, y):
    return np.sin(x) * np.exp(-0.05 * x)

sol = solve_ivp(ode, (-1, 20), (-0.5,), max_step=0.1)

import matplotlib.pyplot as plt
plt.axhline(0, color='k')
plt.plot(sol.t, sol.y.T);
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/b964b7ab4c99021f957e202742274c0395c11346.png]]
:END:

#+BEGIN_SRC jupyter-python
def event0(x, y):
    return y  # this is y=0

def event1(x, y):
    return ode(x, y)  # this is for y'=0

event1.direction = 1 # this finds minima

def event2(x, y):
    return ode(x, y)  # this is for y'=0

event2.direction = -1 # this finds minima

def event3(x, y):
    return y - 0.5

sol = solve_ivp(ode, [-1, 20], np.array([-0.5]), max_step=0.1,
                events=[event0, event1, event2, event3])

import matplotlib.pyplot as plt
plt.axhline(0, color='k')
plt.plot(sol.t_events[0], sol.y_events[0], 'o', color='orange', label='zero')
plt.plot(sol.t_events[1], sol.y_events[1], 'o', color='red', label='min')
plt.plot(sol.t_events[2], sol.y_events[2], 'o', color='green', label='max')
plt.plot(sol.t_events[3], sol.y_events[3], 's', color='b', label='max')
plt.plot(sol.t, sol.y.T)
plt.legend();
#+END_SRC

#+RESULTS:
:RESULTS:
/Users/jkitchin/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py:102: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return array(a, dtype, copy=False, order=order)
[[file:./.ob-jupyter/a3a7214b9477fd8b467e086e0aec0f5e726efe13.png]]
:END:


#+BEGIN_SRC jupyter-python
sol
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
  message: 'The solver successfully reached the end of the integration interval.'
     nfev: 1268
     njev: 0
      nlu: 0
      sol: None
   status: 0
  success: True
        t: array([-1.00000000e+00, -9.10748244e-01, -8.10748244e-01, -7.10748244e-01,
       -6.10748244e-01, -5.10748244e-01, -4.10748244e-01, -3.10748244e-01,
       -2.10748244e-01, -1.10748244e-01, -1.07482436e-02,  8.92517564e-02,
        1.89251756e-01,  2.89251756e-01,  3.89251756e-01,  4.89251756e-01,
        5.89251756e-01,  6.89251756e-01,  7.89251756e-01,  8.89251756e-01,
        9.89251756e-01,  1.08925176e+00,  1.18925176e+00,  1.28925176e+00,
        1.38925176e+00,  1.48925176e+00,  1.58925176e+00,  1.68925176e+00,
        1.78925176e+00,  1.88925176e+00,  1.98925176e+00,  2.08925176e+00,
        2.18925176e+00,  2.28925176e+00,  2.38925176e+00,  2.48925176e+00,
        2.58925176e+00,  2.68925176e+00,  2.78925176e+00,  2.88925176e+00,
        2.98925176e+00,  3.08925176e+00,  3.18925176e+00,  3.28925176e+00,
        3.38925176e+00,  3.48925176e+00,  3.58925176e+00,  3.68925176e+00,
        3.78925176e+00,  3.88925176e+00,  3.98925176e+00,  4.08925176e+00,
        4.18925176e+00,  4.28925176e+00,  4.38925176e+00,  4.48925176e+00,
        4.58925176e+00,  4.68925176e+00,  4.78925176e+00,  4.88925176e+00,
        4.98925176e+00,  5.08925176e+00,  5.18925176e+00,  5.28925176e+00,
        5.38925176e+00,  5.48925176e+00,  5.58925176e+00,  5.68925176e+00,
        5.78925176e+00,  5.88925176e+00,  5.98925176e+00,  6.08925176e+00,
        6.18925176e+00,  6.28925176e+00,  6.38925176e+00,  6.48925176e+00,
        6.58925176e+00,  6.68925176e+00,  6.78925176e+00,  6.88925176e+00,
        6.98925176e+00,  7.08925176e+00,  7.18925176e+00,  7.28925176e+00,
        7.38925176e+00,  7.48925176e+00,  7.58925176e+00,  7.68925176e+00,
        7.78925176e+00,  7.88925176e+00,  7.98925176e+00,  8.08925176e+00,
        8.18925176e+00,  8.28925176e+00,  8.38925176e+00,  8.48925176e+00,
        8.58925176e+00,  8.68925176e+00,  8.78925176e+00,  8.88925176e+00,
        8.98925176e+00,  9.08925176e+00,  9.18925176e+00,  9.28925176e+00,
        9.38925176e+00,  9.48925176e+00,  9.58925176e+00,  9.68925176e+00,
        9.78925176e+00,  9.88925176e+00,  9.98925176e+00,  1.00892518e+01,
        1.01892518e+01,  1.02892518e+01,  1.03892518e+01,  1.04892518e+01,
        1.05892518e+01,  1.06892518e+01,  1.07892518e+01,  1.08892518e+01,
        1.09892518e+01,  1.10892518e+01,  1.11892518e+01,  1.12892518e+01,
        1.13892518e+01,  1.14892518e+01,  1.15892518e+01,  1.16892518e+01,
        1.17892518e+01,  1.18892518e+01,  1.19892518e+01,  1.20892518e+01,
        1.21892518e+01,  1.22892518e+01,  1.23892518e+01,  1.24892518e+01,
        1.25892518e+01,  1.26892518e+01,  1.27892518e+01,  1.28892518e+01,
        1.29892518e+01,  1.30892518e+01,  1.31892518e+01,  1.32892518e+01,
        1.33892518e+01,  1.34892518e+01,  1.35892518e+01,  1.36892518e+01,
        1.37892518e+01,  1.38892518e+01,  1.39892518e+01,  1.40892518e+01,
        1.41892518e+01,  1.42892518e+01,  1.43892518e+01,  1.44892518e+01,
        1.45892518e+01,  1.46892518e+01,  1.47892518e+01,  1.48892518e+01,
        1.49892518e+01,  1.50892518e+01,  1.51892518e+01,  1.52892518e+01,
        1.53892518e+01,  1.54892518e+01,  1.55892518e+01,  1.56892518e+01,
        1.57892518e+01,  1.58892518e+01,  1.59892518e+01,  1.60892518e+01,
        1.61892518e+01,  1.62892518e+01,  1.63892518e+01,  1.64892518e+01,
        1.65892518e+01,  1.66892518e+01,  1.67892518e+01,  1.68892518e+01,
        1.69892518e+01,  1.70892518e+01,  1.71892518e+01,  1.72892518e+01,
        1.73892518e+01,  1.74892518e+01,  1.75892518e+01,  1.76892518e+01,
        1.77892518e+01,  1.78892518e+01,  1.79892518e+01,  1.80892518e+01,
        1.81892518e+01,  1.82892518e+01,  1.83892518e+01,  1.84892518e+01,
        1.85892518e+01,  1.86892518e+01,  1.87892518e+01,  1.88892518e+01,
        1.89892518e+01,  1.90892518e+01,  1.91892518e+01,  1.92892518e+01,
        1.93892518e+01,  1.94892518e+01,  1.95892518e+01,  1.96892518e+01,
        1.97892518e+01,  1.98892518e+01,  1.99892518e+01,  2.00000000e+01])
 t_events: [array([ 1.59638775,  4.79093556,  7.87059111, 11.08469837, 14.14148774,
       17.38239099]), array([5.48212339e-24, 6.28318531e+00, 1.25663706e+01, 1.88495559e+01]), array([ 3.14159265,  9.42477796, 15.70796327])]
        y: array([[-0.5       , -0.57641892, -0.65555681, -0.7271496 , -0.79055881,
        -0.8452339 , -0.89071683, -0.92664575, -0.95275764, -0.96888993,
        -0.97498113, -0.97107044, -0.95729635, -0.9338943 , -0.90119333,
        -0.85961187, -0.80965273, -0.75189719, -0.68699846, -0.61567444,
        -0.53869993, -0.45689835, -0.371133  , -0.28229813, -0.19130967,
        -0.09909591, -0.0065881 ,  0.08528882,  0.17562543,  0.26353669,
         0.34817055,  0.4287161 ,  0.50441125,  0.57454982,  0.63848805,
         0.69565038,  0.74553452,  0.78771571,  0.82185017,  0.84767777,
         0.86502375,  0.87379962,  0.87400318,  0.8657177 ,  0.84911024,
         0.82442911,  0.79200064,  0.75222512,  0.70557209,  0.65257495,
         0.59382505,  0.52996516,  0.4616826 ,  0.38970194,  0.31477737,
         0.23768494,  0.15921459,  0.08016211,  0.00132118, -0.07652451,
        -0.15260899, -0.22619149, -0.29656352, -0.36305565, -0.42504377,
        -0.48195489, -0.5332723 , -0.5785402 , -0.61736761, -0.64943163,
        -0.67447998, -0.69233283, -0.70288383, -0.70610048, -0.7020237 ,
        -0.69076669, -0.67251309, -0.64751445, -0.61608704, -0.57860805,
        -0.53551123, -0.48728203, -0.43445219, -0.37759403, -0.31731432,
        -0.2542479 , -0.18905106, -0.12239479, -0.05495797,  0.01257952,
         0.07954354,  0.14527241,  0.20912329,  0.27047851,  0.32875137,
         0.38339177,  0.43389125,  0.47978771,  0.52066952,  0.5561791 ,
         0.58601601,  0.60993931,  0.62776941,  0.63938922,  0.64474473,
         0.64384489,  0.63676092,  0.62362494,  0.60462811,  0.58001807,
         0.55009596,  0.51521285,  0.47576578,  0.43219333,  0.38497081,
         0.33460519,  0.28162973,  0.22659839,  0.1700801 ,  0.11265296,
         0.05489839, -0.00260476, -0.05928585, -0.11458814, -0.16797418,
        -0.21893093, -0.26697472, -0.31165567, -0.35256194, -0.38932337,
        -0.42161482, -0.44915893, -0.47172841, -0.48914781, -0.50129476,
        -0.50810067, -0.50955083, -0.5056841 , -0.49659191, -0.48241687,
        -0.46335084, -0.43963252, -0.41154458, -0.37941044, -0.34359065,
        -0.30447888, -0.26249769, -0.21809407, -0.17173466, -0.12390098,
        -0.07508444, -0.02578136,  0.02351202,  0.07230451,  0.1201148 ,
         0.16647614,  0.21094089,  0.25308474,  0.29251076,  0.32885303,
         0.36178004,  0.39099759,  0.41625138,  0.43732916,  0.4540624 ,
         0.46632756,  0.47404686,  0.47718858,  0.47576697,  0.4698416 ,
         0.45951633,  0.44493787,  0.42629381,  0.40381045,  0.37775007,
         0.34840798,  0.3161093 ,  0.28120536,  0.24406994,  0.20509538,
         0.16468843,  0.12326605,  0.0812512 ,  0.03906852, -0.00285989,
        -0.04411868, -0.08430329, -0.12302391, -0.15990918, -0.19460975,
        -0.22680149, -0.25618853, -0.28250588, -0.30552179, -0.32503971,
        -0.34089993, -0.35298076, -0.36119939, -0.36551236, -0.36591553,
        -0.36244379, -0.3551703 , -0.34420537, -0.32969502, -0.31181916,
        -0.29078942, -0.2668468 , -0.2402589 , -0.21131703, -0.18033308,
        -0.14763618, -0.14403411]])
 y_events: [array([[-3.66026653e-16],
       [ 6.46184495e-17],
       [-7.63278329e-17],
       [-1.20736754e-15],
       [-2.53269627e-16],
       [ 3.05311332e-16]]), array([[-0.97503891],
       [-0.70611392],
       [-0.50969037],
       [-0.36622209]]), array([[0.87497206],
       [0.64513908],
       [0.47726845]])]
#+end_example
:END:




























When solving an ordinary differential equation we can define event functions that are triggered when the event function changes sign (i.e. crosses zero). This has many applications including root-finding and optimization (finding minima and maxima). This video illustrates how to do each of these with an example.
