#+title: Root failures - when you don't find a solution

#+attr_org: :width 800
[[/Users/jkitchin/Dropbox/python/pycse/pycse-channel/root-failures.png]]

#+BEGIN_SRC jupyter-python
import numpy as np

def f(x):
    return np.exp(x) - 2

from scipy.optimize import root

root(f, 1)
#+END_SRC

#+RESULTS:
:RESULTS:
    fjac: array([[-1.]])
     fun: array([0.])
 message: 'The solution converged.'
    nfev: 8
     qtf: array([-5.22488719e-11])
       r: array([-2.0000004])
  status: 1
 success: True
       x: array([0.69314718])
:END:

* No solution

#+BEGIN_SRC jupyter-python
def f(x):
    return x**2 + 1

root(f, 10)
#+END_SRC

#+RESULTS:
:RESULTS:
    fjac: array([[-1.]])
     fun: array([1.00000001])
 message: 'The iteration is not making good progress, as measured by the \n  improvement from the last ten iterations.'
    nfev: 34
     qtf: array([-1.00000001])
       r: array([-0.00108154])
  status: 5
 success: False
       x: array([-7.56829527e-05])
:END:

* Pathological tolerance

#+BEGIN_SRC jupyter-python
X = np.linspace(-1, 1)

import matplotlib.pyplot as plt
plt.plot(X, X**7)
plt.ylim([-1e-5, 1e-5])
#+END_SRC

#+RESULTS:
:RESULTS:
| -1e-05 | 1e-05 |
[[file:./.ob-jupyter/1a77870551d8158725876e479a2cbc437ba29a2b.png]]
:END:

#+BEGIN_SRC jupyter-python
def f(x):
    return x**7

root(f, 0.2, method='broyden1')
#+END_SRC

#+RESULTS:
:RESULTS:
     fun: array([4.33322228e-06])
 message: 'A solution was found at the specified tolerance.'
     nit: 5
  status: 1
 success: True
       x: array(0.17132871)
:END:

* Pathological initial guess

#+BEGIN_SRC jupyter-python
def f(x):
    return x**3 - 2 * x + 2

X = np.linspace(-2, 2)
plt.plot(X, f(X))
#+END_SRC

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fd4e91ea430> |
[[file:./.ob-jupyter/4ed5c956c03842dc312b70848ff38f0a72d2b1c1.png]]
:END:

#+BEGIN_SRC jupyter-python
root(f, 0.5, method='df-sane')
#+END_SRC

#+RESULTS:
:RESULTS:
     fun: array([-7.58726415e-12])
 message: 'successful convergence'
    nfev: 26
     nit: 10
 success: True
       x: array(-1.76929235)
:END:

* Vanishing gradients

#+BEGIN_SRC jupyter-python
def f(x):
    return np.tanh(x)

X = np.linspace(-20, 20)

plt.plot(X, f(X))
#+END_SRC

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fd4d1134f70> |
[[file:./.ob-jupyter/b3c09bacc7a337ab0b95b8fdb7fa1a1918a6505e.png]]
:END:

#+BEGIN_SRC jupyter-python
root(f, 20, method='lm')
#+END_SRC

#+RESULTS:
:RESULTS:
   cov_x: None
    fjac: array([[-0.]])
     fun: array([1.])
    ipvt: array([1], dtype=int32)
 message: 'The cosine of the angle between func(x) and any column of the\n  Jacobian is at most 0.000000 in absolute value'
    nfev: 2
     qtf: array([1.])
  status: 4
 success: True
       x: array([20.])
:END:
